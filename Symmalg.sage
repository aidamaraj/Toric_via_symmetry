def monomial_generator(variables, degree):
    '''***Description***'''
    n_vars = len(variables)
    degs = list(WeightedIntegerVectors(degree,[1 for i in range(n_vars)]))
    monomials = []
    for d in degs:
        mon = 1
        for i in range(n_vars):
            mon *= variables[i]^d[i]
        monomials.append(mon)
    return monomials



def symmetry_alg_homo(generators):
    ''' This function takes generators of a homogeneous prime ideal as input.
    Then computes and returns the symmetry Lie algebra of the ideal generated by the polynomials in `generatos`. 
    This function also assumes that all the generating polynomials of the ideal homogeneous and of same degree.'''
    S = generators[0].parent()
    n_vars = len(S.gens())
    var =[str(t) for t in S.gens()]
    var+= ['g%i%i'%(i,j) for i in range(1,n_vars+1) for j in range(1,n_vars+1)]
    R = PolynomialRing(QQ, var)
    R.inject_variables()
    gens = [R(g) for g in generators]
    d = gens[0].degree()
    degs = list(WeightedIntegerVectors(d,[1 for i in range(n_vars)]))

